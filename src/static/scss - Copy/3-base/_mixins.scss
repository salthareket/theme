@mixin bg-cover() {
  background-repeat: no-repeat;
  background-position: center center;
  /*-webkit-background-size: cover;
  -moz-background-size: cover;
  -o-background-size: cover*/
  background-size: cover;
}
@mixin bg-contain {
  background-repeat: no-repeat !important;
  background-position: center center;
  /*-webkit-background-size: contain;
  -moz-background-size: contain;
  -o-background-size: contain;*/
  background-size: contain;
}

@mixin calc($property, $expression) { 
  /*#{$property}: -webkit-calc(#{$expression}); 
  #{$property}: -moz-calc(#{$expression});*/
  #{$property}: calc(#{$expression}); 
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}

@function calculateRem($size, $multiply:1) {
  $remSize: ($size / 16px) * $multiply;
  @return #{$remSize}rem;
}
@mixin fontSize($size) {
  font-size: $size;
  font-size: calculateRem($size);
}


@function number($value) {
	$value: strip-unit($value);
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);
}



@mixin grayscale(){
    //-webkit-filter: grayscale(1);
    //-webkit-filter: grayscale(100%);
    /* Chrome 19+, Safari 6+, Safari 6+ iOS */
    /*-moz-filter: grayscale(100%);
    -ms-filter: grayscale(100%);
    -o-filter: grayscale(100%);*/
    filter: grayscale(100%);
    //filter: gray;
    /* IE 6-9 */
    /* filter: url(grayscale.svg#grayscale);*/
    //-webkit-backface-visibility: hidden;
    /* Fix for transition flickering */
}



@mixin filter($filter-type,$filter-amount) { 
  /*-webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');*/
  filter: $filter-type+unquote('(#{$filter-amount})');
}


// @function implode() -- join list elements to form a single string
//  {string} $pieces: the list of strings to implode
//  {string} $glue: the "glue" between elements in the result string
//  @return {string} the result string
@function implode($pieces, $glue: "") {
  $result: null;
  @for $i from 1 through length($pieces) {
    $piece: nth($pieces, $i);
    @if type-of($piece) == list {
      $result: unquote("#{$result}#{$glue}#{implode($piece, $glue)}");
    } @else {
      $result: unquote("#{$result}#{$glue}#{$piece}");
    }
  }
  @if $result != null {
    $result: str-slice($result, str-length($glue) + 1, -1);
  }
  @return $result;
}



@mixin aspect-ratio($width, $height) {
    position: relative;
    height: auto;
    &:before {
      display: block;
      content: "";
      width: 100%;
      padding-top: ($height / $width) * 100%;
    }
    & > * {
      display: block;
      position: absolute!important;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
    }
}

@function random-item($arr) {
  @return nth($arr, random(length($arr)));
}


@mixin card-reset(){
    --#{$prefix}card-spacer-y: 0px;
    --#{$prefix}card-spacer-x: 0px;
    --#{$prefix}card-title-spacer-y: #{$card-title-spacer-y};
    --#{$prefix}card-border-width: 0;
    --#{$prefix}card-border-color: transparent;
    --#{$prefix}card-border-radius:0px;
    --#{$prefix}card-box-shadow: none;
    --#{$prefix}card-inner-border-radius: 0px;
    --#{$prefix}card-cap-padding-y: 0px;
    --#{$prefix}card-cap-padding-x: 0px;
    --#{$prefix}card-cap-bg: transparent;
    --#{$prefix}card-bg: transparent;
}

@mixin absolute-fill($value : 0){
    position:absolute;
    top:$value;
    bottom:$value;
    left:$value;
    right:$value;
    width:auto!important;
    height:auto!important;
}


@mixin optional-at-root($sel) {
  @at-root #{if(not &, $sel, selector-append(&, $sel))} {
    @content;
  }
}

@mixin placeholder {
    @include optional-at-root('::-webkit-input-placeholder') {
      @content;
    }
    @include optional-at-root(':-moz-placeholder') {
      @content;
    }
    @include optional-at-root('::-moz-placeholder') {
      @content;
    }
    @include optional-at-root(':-ms-input-placeholder') {
      @content;
    }
}



@mixin multiLineEllipsis($lineHeight: 1.2em, $lineCount: 1, $bgColor: white){
    overflow: hidden;
    position: relative;
    line-height: $lineHeight;
    max-height: $lineHeight * $lineCount; 
    text-align: justify;
    margin-right: -1em;
    padding-right: 1em;
    &:before {
      content: '...';
      position: absolute;
      right: 0;
      bottom: 0;
    }
    &:after {
      content: '';
      position: absolute;
      right: 0;
      width: 1em;
      height: 1em;
      margin-top: 0.2em;
      background: $bgColor;
    }
}

@mixin ellipsis($lineCount: 1){
  display: -webkit-box;
  -webkit-line-clamp: $lineCount;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
  //white-space: nowrap;
}


@mixin svgColor($color:white){
    @if type-of($color) == 'map' {
        @each $id, $id_color in $color {
            ##{$id}{
                path[fill]:not([stroke]),
                rect[fill]:not([stroke]),
                polygon[fill]:not([stroke]){
                    fill:$id_color!important;
                }
                line[stroke],
                path[stroke],
                rect[stroke],
                polygon[stroke]{
                    stroke:$id_color!important;
                    //fill:transparent!important;
                } 
            }
        }
    } @else {
        path[fill]:not([stroke]),
        rect[fill]:not([stroke]),
        polygon[fill]:not([stroke]){
            fill:$color!important;
        }
        line[stroke],
        path[stroke],
        rect[stroke],
        polygon[stroke]{
            stroke:$color!important;
            //fill:transparent!important;
        }        
    }
}


@mixin btnFa($key, $font-weight: 400) {
  $content: null;
  $font-family: null;
  
  @if map-has-key($fa-icons, $key) {
    $content: map-get($fa-icons, $key);
    $font-family: $icon-font;
  } @else if map-has-key($fa-brand-icons, $key) {
    $content: map-get($fa-brand-icons, $key);
    $font-family: $icon-font-brands;
  }
  
  @if $content != null and $font-family != null {
    &:before {
      content: "#{$content}";
      font-family: $font-family;
      font-weight: $font-weight;
    }
  } @else {
    @warn "The icon `#{$key}` was not found in either $fa-icons or $fa-brand-icons.";
  }
}


@mixin aspect-ratio-bs($name, $ratio) {
  .ratio-#{$name}-#{$ratio}::before {
    padding-top: map-get($aspect-ratios, $ratio);
  }
}

@mixin aspect-ratio-bs-responsive {
  @each $ratio-name, $ratio-value in $aspect-ratios {
    .ratio-#{$ratio-name}::before {
      padding-top: #{$ratio-value};
    }
    @each $breakpoint-name, $breakpoint-value in $grid-breakpoints {
      @include media-breakpoint-up($breakpoint-name) {
        .ratio-#{$breakpoint-name}-#{$ratio-name}::before {
          --bs-aspect-ratio: #{$ratio-value};
        }
      }
    }
  }
}



@mixin object-position($position) {
  @if $position == 'top-left' {
    object-position: top left;
  } @else if $position == 'top-center' {
    object-position: top center;
  } @else if $position == 'top-right' {
    object-position: top right;
  } @else if $position == 'bottom-left' {
    object-position: bottom left;
  } @else if $position == 'bottom-center' {
    object-position: bottom center;
  } @else if $position == 'bottom-right' {
    object-position: bottom right;
  } @else if $position == 'center-left' {
    object-position: center left;
  } @else if $position == 'center' {
    object-position: center;
  } @else if $position == 'center-right' {
    object-position: center right;
  }
}
